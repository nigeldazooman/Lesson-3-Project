Lesson 8 Final Project Bug Report

Vulnerability: "Cross-Domain Misconfiguration"
Vulnerability Description: This warning indicates that the web application has misconfigured Cross-Origin Resource Sharing (CORS) policies, potentially allowing unauthorized cross-domain access to sensitive resources.
Steps to Reproduce:
  1. Visit the website we are working on (https://juice-shop.herokuapp.com).
  2. Look for features or functionalities that involve interactions with resources hosted on different domains.
  3. Perform actions that trigger cross-domain requests, such as submitting forms, loading resources, or interacting with embedded content (e.g., iframes).
  4. Monitor network requests using browser developer tools or a web proxy to observe how cross-domain interactions are handled.
  5. If you notice cross-domain requests being made without appropriate security controls (e.g., CORS headers), the warning is replicated.
Impact: Severe
Potential Mitigation: We recommend performing the following mitigation steps.
  1. Review CORS Configuration: Ensure that CORS policies are properly configured to restrict cross-origin requests to trusted domains and resources. Use specific origins instead of wildcards whenever possible.
  2. Implement Secure CORS Policies: Apply appropriate CORS headers and policies to enforce restrictions on cross-origin requests based on the web application's security requirements.
  3. Validate Cross-Origin Requests: Implement server-side validation and authorization checks for cross-origin requests to prevent unauthorized access to sensitive resources.
  4. Regular Security Testing: Perform regular security testing, including web application security scans, to identify and remediate cross-domain misconfigurations and other security issues.


Vulnerability: "Cross-Domain JavaScript Source File Inclusion"
Vulnerability Description: This warning refers to a security vulnerability where an attacker can include JavaScript files from a different domain into a web page hosted on another domain. 
  This vulnerability can lead to various types of attacks, including Cross-Site Scripting (XSS) and data theft.
Steps to Reproduce:
  1. Visit the website we are working on (e.g., https://juice-shop.herokuapp.com).
  2. Inspect the source code of the web page to identify the <script> tags or other mechanisms used to include JavaScript files.
  3. Look for references to JavaScript files hosted on different domains (e.g., CDNs or external services).
  4. Attempt to access the included JavaScript files directly by entering their URLs in the browser's address bar.
  5. If you're able to access JavaScript files from different domains, the warning is replicated.
Impact: Severe
Potential Mitigation: We recommend performing the following mitigation steps.
  1. Implement Proper CORS Policies: Use Cross-Origin Resource Sharing (CORS) headers to control which domains can include JavaScript files from your domain. Configure CORS policies to allow access only from trusted domains.
  2. Content Security Policy (CSP): Implement CSP headers to specify which domains are allowed to execute scripts on your web pages. 
                                    CSP provides an additional layer of defense against XSS attacks and unauthorized script execution.
  3. Avoid Third-Party Scripts: Be cautious when including third-party JavaScript files in your web pages. Only use scripts from trusted sources and ensure they follow security best practices.
